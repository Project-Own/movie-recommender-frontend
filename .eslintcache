[{"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Home.js":"1","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\AppBar\\TopNavBar.js":"2","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\features\\Snackbar\\snackbarSlice.js":"3","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\light.js":"4","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollTop\\ScrollTopIcon.jsx":"5","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\theme.js":"6","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Layout.js":"7","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollFollow\\useScrollPosition.js":"8","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\MovieDetail\\MovieDetail.js":"9","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\FloatCard\\FloatCard.jsx":"10","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Profile.js":"11","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\base.js":"12","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\Contents.jsx":"13","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\LikeButton\\LikeButton.jsx":"14","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\dark.js":"15","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\UserPickLayout.js":"16","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\AppBar\\HideOnScroll.jsx":"17","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\imdbList.js":"18","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\ImageSlider.js":"19","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollFollow\\ScrollFollow.jsx":"20"},{"size":1485,"mtime":1613748797320,"results":"21","hashOfConfig":"22"},{"size":9730,"mtime":1613992849041,"results":"23","hashOfConfig":"22"},{"size":721,"mtime":1613748797316,"results":"24","hashOfConfig":"22"},{"size":728,"mtime":1613990473944,"results":"25","hashOfConfig":"22"},{"size":1291,"mtime":1613748797306,"results":"26","hashOfConfig":"22"},{"size":299,"mtime":1613748797318,"results":"27","hashOfConfig":"22"},{"size":8441,"mtime":1613995126270,"results":"28","hashOfConfig":"22"},{"size":1212,"mtime":1613748797305,"results":"29","hashOfConfig":"22"},{"size":10655,"mtime":1613992748284,"results":"30","hashOfConfig":"22"},{"size":893,"mtime":1613748797298,"results":"31","hashOfConfig":"22"},{"size":2331,"mtime":1613748797321,"results":"32","hashOfConfig":"22"},{"size":174,"mtime":1613748797317,"results":"33","hashOfConfig":"22"},{"size":11661,"mtime":1613988409000,"results":"34","hashOfConfig":"22"},{"size":2080,"mtime":1613748797302,"results":"35","hashOfConfig":"22"},{"size":703,"mtime":1613748797317,"results":"36","hashOfConfig":"22"},{"size":772,"mtime":1613748797321,"results":"37","hashOfConfig":"22"},{"size":413,"mtime":1613748797293,"results":"38","hashOfConfig":"22"},{"size":2379,"mtime":1613994504768,"results":"39","hashOfConfig":"22"},{"size":1337,"mtime":1613995207299,"results":"40","hashOfConfig":"22"},{"size":12493,"mtime":1613748797304,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1oqjmsb",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"53"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Home.js",["87"],"import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport TopNavBar from \"../../components/AppBar/TopNavBar\";\r\nimport Login from \"./auth/Login\";\r\nimport Register from \"./auth/Register\";\r\nimport Layout from \"./Layout\";\r\nimport UserPickLayout from \"./UserPickLayout\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { loadUser } from \"../../features/Auth/loadUser\";\r\n\r\nimport Profile from \"./Profile\";\r\nconst Home = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    loadUser(dispatch);\r\n  }, []);\r\n\r\n  console.log(props);\r\n  return (\r\n    <Router>\r\n      <TopNavBar />\r\n      <Switch>\r\n        <Route exact path=\"/movie-recommender-frontend/\" component={Layout} />\r\n        <Route\r\n          exact\r\n          path=\"/movie-recommender-frontend/login\"\r\n          component={Login}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/movie-recommender-frontend/register\"\r\n          component={Register}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/movie-recommender-frontend/select\"\r\n          component={UserPickLayout}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/movie-recommender-frontend/dashboard\"\r\n          component={Layout}\r\n        />\r\n        <Route\r\n          exact\r\n          path=\"/movie-recommender-frontend/profile\"\r\n          component={Profile}\r\n        />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n",["88","89"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\AppBar\\TopNavBar.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\features\\Snackbar\\snackbarSlice.js",[],["90","91"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\light.js",[],["92","93"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollTop\\ScrollTopIcon.jsx",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\theme.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Layout.js",["94"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollFollow\\useScrollPosition.js",["95"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\MovieDetail\\MovieDetail.js",["96","97","98"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\FloatCard\\FloatCard.jsx",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\Profile.js",["99","100"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\base.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\Contents.jsx",["101","102"],"import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport Footer from \"./Footer\";\r\n// import movieList from './data'\r\n// https://image.tmdb.org/t/p/w185\r\n// import {useState} from 'react';\r\n// import axios from 'axios';\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addMovie,\r\n  selectMovieSelected,\r\n  selectToken,\r\n} from \"../../features/Auth/registerSlice\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport { setSnackbar } from \"../../features/Snackbar/snackbarSlice\";\r\n\r\nconst API_ADDRESS = \"https://www.omdbapi.com/?apikey=e4c29baa&i=\";\r\n\r\nconst addToPreferenceAPI = async (index, token = \"\", add = true) => {\r\n  const operation = add ? \"add\" : \"remove\";\r\n  try {\r\n    await Axios.post(\r\n      `https://vae-login.herokuapp.com/api/${operation}-movie`,\r\n      {\r\n        index: index,\r\n      },\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"x-auth-token\": token,\r\n        },\r\n      }\r\n    );\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nasync function getMovieTitle(selectedTitle) {\r\n  //recommendation\r\n\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(selectedTitle),\r\n  };\r\n\r\n  return fetch(\r\n    \"https://item-recommendation.herokuapp.com/recom\",\r\n    requestOptions\r\n  )\r\n    .then(async (response) => {\r\n      const data = await response.json();\r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      // console.log(data);\r\n      return data;\r\n    })\r\n\r\n    .catch((error) => {\r\n      console.error(\"There was an error!\", error);\r\n    });\r\n}\r\n\r\nconst Contents = () => {\r\n  const [movieList, setMovieList] = useState([]);\r\n  const [movieIndex, setMovieIndex] = useState([]);\r\n  const [selectedMovieList, setSelectedMovieList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [selectButtonClicked, setSelectButtonClicked] = useState(false);\r\n  const token = useSelector(selectToken);\r\n  const dispatch = useDispatch();\r\n\r\n  const movieSelected = useSelector(selectMovieSelected);\r\n\r\n  const FIND_INDEX_API_ADDRESS =\r\n    \"https://vae-movie-recommender.herokuapp.com/findIndex\";\r\n  useEffect(() => {\r\n    try {\r\n      if (movieSelected || typeof movieSelected != \"undefined\") {\r\n        console.log(\"MOVIE SELECED\");\r\n        console.log(movieSelected);\r\n        Axios.post(\r\n          FIND_INDEX_API_ADDRESS,\r\n          {\r\n            title: movieSelected.title,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"x-auth-token\": token,\r\n            },\r\n          }\r\n        ).then((res) => {\r\n          console.log(\"INDEXXX\");\r\n          console.log(res.data);\r\n\r\n          if (res.data[\"index\"].length === 0) {\r\n            dispatch(\r\n              setSnackbar({\r\n                snackbarOpen: true,\r\n                snackbarType: \"error\",\r\n                snackbarMessage: `Did not find selected movie in recommender system's database! Please, choose another movie.`,\r\n              })\r\n            );\r\n          } else {\r\n            let response = res?.data[\"index\"][0];\r\n            response = response[\"index\"];\r\n\r\n            console.log(response);\r\n\r\n            if (response !== 0 && response < 62000) {\r\n              if (selectedMovieList.includes(response)) {\r\n                selectedMovieList.splice(selectedMovieList.indexOf(res), 1);\r\n              } else {\r\n                selectedMovieList.push(response);\r\n                (async function () {\r\n                  let data = await getMovieTitle(response);\r\n\r\n                  await getDetails(data, response, {\r\n                    index: response,\r\n                    ...movieSelected,\r\n                  }); //get details of predicted list here data is the predicted top 20\r\n                })();\r\n              }\r\n\r\n              showHide(selectedMovieList);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [movieSelected]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await axios\r\n        .get(\"https://movie-database-server.herokuapp.com/api/items\")\r\n        .then(async (res) => {\r\n          const movies = await Promise.all(\r\n            res.data.map(async (movie, index) => {\r\n              let omdbRes;\r\n              try {\r\n                omdbRes = await Axios.get(`${API_ADDRESS}${movie.imdbId}`);\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n\r\n              try {\r\n                const res = await Axios.get(\r\n                  \"https://image.tmdb.org/t/p/w185\" + movie.posterPath\r\n                );\r\n                if (res.data === \"<h1>File not Found</h1>\") throw Error;\r\n                movie.posterPath =\r\n                  \"https://image.tmdb.org/t/p/w185\" + movie.posterPath;\r\n              } catch (err) {\r\n                // console.log(res);\r\n                movie.posterPath = omdbRes?.data?.Poster ?? \"Unknown\";\r\n              }\r\n              movie = { ...movie, ...omdbRes.data };\r\n\r\n              return movie;\r\n            })\r\n          );\r\n\r\n          // console.log(\"TEST MOVIE\");\r\n          // console.table(movies);\r\n\r\n          setMovieList(movies);\r\n          setMovieIndex(\r\n            movies.map((movie) => {\r\n              return movie.index;\r\n            })\r\n          );\r\n\r\n          setLoading(false);\r\n          // console.log(res.data);\r\n        })\r\n        .catch((error) => alert(error.message));\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const [check, setCheck] = useState(false);\r\n\r\n  function getRandom(arr, n) {\r\n    var result = new Array(n),\r\n      len = arr.length,\r\n      taken = new Array(len);\r\n    if (n > len) {\r\n      throw new RangeError(\"getRandom: more elements taken than available\");\r\n    }\r\n    while (n--) {\r\n      var x = Math.floor(Math.random() * len);\r\n      result[n] = arr[x in taken ? taken[x] : x];\r\n      taken[x] = --len in taken ? taken[len] : len;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async function getAllDetails(detailsList) {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ title: detailsList }),\r\n    };\r\n\r\n    return fetch(\r\n      \"https://movie-database-server.herokuapp.com/api/items/singleItem\",\r\n      requestOptions\r\n    )\r\n      .then(async (response) => {\r\n        const data = await response.json();\r\n        // check for error response\r\n        if (!response.ok) {\r\n          // get error message from body or default to response status\r\n          const error = (data && data.message) || response.status;\r\n          return Promise.reject(error);\r\n        }\r\n        // console.log(data);\r\n        return data;\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.error(\"There was an error!\", error);\r\n      });\r\n  }\r\n\r\n  async function getDetails(data, index, movieSelected = \" \") {\r\n    console.log(\"DATA\");\r\n    console.log(data);\r\n    try {\r\n      var detailsList = [];\r\n      await Promise.all(\r\n        data.map((Details) =>\r\n          (async function () {\r\n            let data = await getAllDetails(Details);\r\n            // console.log(data)\r\n            if (data[0] !== undefined) {\r\n              detailsList.push(data[0]);\r\n            }\r\n          })()\r\n        )\r\n      );\r\n\r\n      // console.log(det);\r\n      // console.log(detailsList);\r\n\r\n      // console.log(\"DETAILS LIST\");\r\n      // console.log(detailsList);\r\n      var fourRndom = getRandom(detailsList, 4);\r\n      // console.log(fourRndom);\r\n\r\n      // const movies = await Promise.all(\r\n      //   fourRndom.map(async (movie, index) => {\r\n      //     let omdbRes;\r\n      //     try {\r\n      //       omdbRes = await Axios.get(`${API_ADDRESS}${movie.imdbId}`);\r\n      //     } catch (err) {\r\n      //       console.log(err);\r\n      //     }\r\n\r\n      //     try {\r\n      //       const res = await Axios.get(\r\n      //         \"https://image.tmdb.org/t/p/w185\" + movie.posterPath\r\n      //       );\r\n      //       if (res.data === \"<h1>File not Found</h1>\") throw Error;\r\n      //       movie.posterPath =\r\n      //         \"https://image.tmdb.org/t/p/w185\" + movie.posterPath;\r\n      //     } catch (err) {\r\n      //       // console.log(res);\r\n      //       movie.posterPath = omdbRes?.data?.Poster ?? \"Unknown\";\r\n      //     }\r\n      //     movie = { ...movie, ...omdbRes.data };\r\n\r\n      //     return movie;\r\n      //   })\r\n      // );\r\n\r\n      const movieListFront = movieList.slice(0, movieIndex.indexOf(index) + 1);\r\n      const movieListBack = movieList.slice(movieIndex.indexOf(index) + 1);\r\n\r\n      let updatedMovieList = [];\r\n      updatedMovieList = movieListFront.concat(fourRndom);\r\n      updatedMovieList = updatedMovieList.concat(movieListBack);\r\n      if (movieSelected !== \" \") {\r\n        updatedMovieList = [movieSelected].concat(updatedMovieList);\r\n      }\r\n      // console.log(\"Updated Movie List\");\r\n      // console.log(updatedMovieList);\r\n      // updatedMovieList.splice(movieIndex.indexOf(index) + 1, 4, ...fourRndom);\r\n\r\n      setMovieList(updatedMovieList);\r\n\r\n      setMovieIndex(\r\n        updatedMovieList.map((movie) => {\r\n          return movie.index;\r\n        })\r\n      );\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  const showHide = (selectedList) => {\r\n    setSelectedMovieList(selectedList);\r\n    console.log(\"Selected Movie List\" + selectedMovieList);\r\n\r\n    if (typeof selectedList === \"undefined\" || selectedList.length < 1) {\r\n      setCheck(false);\r\n    } else {\r\n      setCheck(true);\r\n    }\r\n  };\r\n  const getMovieCard = (movieObj) => {\r\n    return (\r\n      <Grid item xs={12} sm={4} md={2} align=\"center\">\r\n        <MovieCard\r\n          {...movieObj}\r\n          showHide={showHide}\r\n          selectedList={selectedMovieList}\r\n          setSelectedList={setSelectedMovieList}\r\n          getDetails={getDetails}\r\n        />\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const addToPreference = async () => {\r\n    try {\r\n      dispatch(addMovie({ index: selectedMovieList }));\r\n\r\n      addToPreferenceAPI(selectedMovieList, token, true);\r\n\r\n      setSelectButtonClicked(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  if (selectButtonClicked) {\r\n    return (\r\n      <Redirect\r\n        from=\"/movie-recommender-frontend/select\"\r\n        to=\"/movie-recommender-frontend/\"\r\n      />\r\n    );\r\n  }\r\n\r\n  // console.log(\"Movie List:\");\r\n  // console.table(movieList);\r\n\r\n  // console.log(\"Movie List\" + movieList);\r\n  // console.log(\"Movie Index\" + movieIndex);\r\n\r\n  return (\r\n    <>\r\n    \r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        container\r\n      >\r\n        {loading\r\n          ? new Array(50).fill(0).map(() => (\r\n              <Grid item>\r\n                <Skeleton\r\n                  animation=\"wave\"\r\n                  variant=\"circle\"\r\n                  height={200}\r\n                  width={200}\r\n                  style={{ margin: 4 }}\r\n                />\r\n              </Grid>\r\n            ))\r\n          : movieList?.map((movieObj) => getMovieCard(movieObj))}\r\n      </Grid>\r\n      <Footer check={check} onClickFinished={addToPreference} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contents;\r\n","C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\LikeButton\\LikeButton.jsx",["103"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\themes\\dark.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\views\\Layout\\UserPickLayout.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\AppBar\\HideOnScroll.jsx",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\imdbList.js",["104","105","106","107","108","109","110"],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\frontPage\\ImageSlider.js",[],"C:\\Users\\ASUS\\Documents\\Minor\\movie-recommender-frontend\\src\\components\\ScrollFollow\\ScrollFollow.jsx",[],{"ruleId":"111","severity":1,"message":"112","line":18,"column":6,"nodeType":"113","endLine":18,"endColumn":8,"suggestions":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"115","replacedBy":"121"},{"ruleId":"117","replacedBy":"122"},{"ruleId":"111","severity":1,"message":"123","line":152,"column":6,"nodeType":"113","endLine":152,"endColumn":12,"suggestions":"124"},{"ruleId":"111","severity":1,"message":"125","line":32,"column":29,"nodeType":"126","endLine":32,"endColumn":55},{"ruleId":"127","severity":1,"message":"128","line":63,"column":11,"nodeType":"129","messageId":"130","endLine":63,"endColumn":21},{"ruleId":"131","severity":1,"message":"132","line":81,"column":64,"nodeType":"133","messageId":"134","endLine":81,"endColumn":65,"fix":"135"},{"ruleId":"131","severity":1,"message":"132","line":82,"column":40,"nodeType":"133","messageId":"134","endLine":82,"endColumn":41,"fix":"136"},{"ruleId":"111","severity":1,"message":"137","line":43,"column":6,"nodeType":"113","endLine":43,"endColumn":8,"suggestions":"138"},{"ruleId":"111","severity":1,"message":"139","line":47,"column":6,"nodeType":"113","endLine":47,"endColumn":8,"suggestions":"140"},{"ruleId":"111","severity":1,"message":"141","line":145,"column":6,"nodeType":"113","endLine":145,"endColumn":21,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":377,"column":9,"nodeType":"145","endLine":377,"endColumn":18},{"ruleId":"111","severity":1,"message":"146","line":63,"column":6,"nodeType":"113","endLine":63,"endColumn":13,"suggestions":"147"},{"ruleId":"127","severity":1,"message":"148","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":12},{"ruleId":"127","severity":1,"message":"149","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":16},{"ruleId":"127","severity":1,"message":"150","line":5,"column":8,"nodeType":"129","messageId":"130","endLine":5,"endColumn":31},{"ruleId":"127","severity":1,"message":"151","line":6,"column":8,"nodeType":"129","messageId":"130","endLine":6,"endColumn":20},{"ruleId":"127","severity":1,"message":"152","line":7,"column":8,"nodeType":"129","messageId":"130","endLine":7,"endColumn":22},{"ruleId":"127","severity":1,"message":"153","line":14,"column":3,"nodeType":"129","messageId":"130","endLine":14,"endColumn":9},{"ruleId":"127","severity":1,"message":"154","line":26,"column":9,"nodeType":"129","messageId":"130","endLine":26,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["155"],"no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],["156"],["157"],"React Hook useEffect has missing dependencies: 'genres' and 'searchRecommendation'. Either include them or remove the dependency array.",["158"],"Assignments to the 'throttleTimeout' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","CallExpression","no-unused-vars","'posterPath' is assigned a value but never used.","Identifier","unusedVar","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"159","text":"160"},{"range":"161","text":"160"},"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has a missing dependency: 'func'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'dispatch', 'getDetails', 'selectedMovieList', 'showHide', and 'token'. Either include them or remove the dependency array.",["164"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'clicked', 'dispatch', 'index', and 'token'. Either include them or remove the dependency array.",["165"],"'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'Hidden' is defined but never used.","'classes' is assigned a value but never used.",{"desc":"166","fix":"167"},"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},[2149,2158],"\r\n      .",[2191,2200],{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [dispatch]",{"range":"178","text":"179"},"Update the dependencies array to be: [genres, name, searchRecommendation]",{"range":"180","text":"181"},"Update the dependencies array to be: [dispatch, user]",{"range":"182","text":"183"},"Update the dependencies array to be: [func]",{"range":"184","text":"185"},"Update the dependencies array to be: [dispatch, getDetails, movieSelected, selectedMovieList, showHide, token]",{"range":"186","text":"187"},"Update the dependencies array to be: [clicked, dispatch, index, liked, token]",{"range":"188","text":"189"},[590,592],"[dispatch]",[4237,4243],"[genres, name, searchRecommendation]",[1131,1133],"[dispatch, user]",[1178,1180],"[func]",[4395,4410],"[dispatch, getDetails, movieSelected, selectedMovieList, showHide, token]",[1635,1642],"[clicked, dispatch, index, liked, token]"]